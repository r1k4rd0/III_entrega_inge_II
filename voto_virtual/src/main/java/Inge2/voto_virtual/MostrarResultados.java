package Inge2.voto_virtual;


import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.Cursor;
import com.vaadin.addon.charts.model.DataSeries;
import com.vaadin.addon.charts.model.DataSeriesItem;
import com.vaadin.addon.charts.model.Labels;
import com.vaadin.addon.charts.model.PlotOptionsPie;
import com.vaadin.addon.charts.model.style.SolidColor;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.sqlcontainer.SQLContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;


public class MostrarResultados extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private DataSeries series = new DataSeries();
	private int idEvento = 0;
	private String nombEvento = " ";
	private Conexion conexion;
	private int votosTot;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MostrarResultados(int idEven, String nombEven) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		idEvento = idEven;
		nombEvento = nombEven;
		CrearChart();
		
        
	}
	
	
	private void CrearChart(){
		Chart chart = new Chart(ChartType.PIE);
		Configuration conf = chart.getConfiguration();
		conf.setTitle("Resultados votaciones");
		PlotOptionsPie plotOptions = new PlotOptionsPie();
        plotOptions.setCursor(Cursor.POINTER);
        Labels dataLabels = new Labels();
        dataLabels.setEnabled(true);
        dataLabels.setColor(new SolidColor(0, 0, 0));
        dataLabels.setConnectorColor(new SolidColor(0, 0, 0));
        dataLabels
                .setFormatter("''+ this.point.name +': '+ this.percentage +' %'");
        plotOptions.setDataLabels(dataLabels);
        conf.setPlotOptions(plotOptions);
        //DataSeries series = new DataSeries();
        
        AgregarDatos();
      
        conf.setSeries(series);

        chart.drawChart(conf);
        
        mainLayout.addComponent(chart);
	}
	
	private void AgregarDatos(){
		
		if(nombEvento=="Plebiscito"){
			String consulta = "SELECT id_tendencia, votos_recibidos FROM resultados_plebiscito WHERE id_evento="+idEvento+";";
			 conexion = new Conexion("rebeca", "ramirez.arroyo");
			 if(conexion!=null){
				  SQLContainer resultado2 = conexion.consulta(consulta);
				  if(resultado2 != null){
					  
					 
					  
					  Object id2 = resultado2.firstItemId();
					  while(id2 != null){
						  Item item2 = resultado2.getItem(id2);
						  String votos = item2.getItemProperty("votos_recibidos").toString();
						  int votosTendencia = Integer.parseInt(votos);
						  String idTendG = item2.getItemProperty("id_tendencia").toString();
						  int idTendGraf = Integer.parseInt(idTendG);
						  agregarAGraficoTend(idTendGraf, votosTendencia);
						  
						  
						  id2 = resultado2.nextItemId(id2);
					  }
					  
					  
					  
				  }
			 }
			 
		}
		if(nombEvento=="Elecci√≥n"){
			String consulta = "SELECT id_tendencia, votos_recibidos FROM resultados_eleccion WHERE id_evento="+idEvento+";";
			 conexion = new Conexion("rebeca", "ramirez.arroyo");
			 if(conexion!=null){
				  SQLContainer resultado2 = conexion.consulta(consulta);
				  if(resultado2 != null){
					 
					  
					  Object id2 = resultado2.firstItemId();
					  while(id2 != null){
						  Item item2 = resultado2.getItem(id2);
						  String votos = item2.getItemProperty("votos_recibidos").toString();
						  int votosTendencia = Integer.parseInt(votos);
						  String idTendG = item2.getItemProperty("id_tendencia").toString();
						  int idTendGraf = Integer.parseInt(idTendG);
						  agregarAGraficoTend2(idTendGraf, votosTendencia);
						  
						  
						  id2 = resultado2.nextItemId(id2);
					  }
					  
					  
				  }
			 }
			 
		}
		

	}
	
	private void agregarAGraficoTend(int idTendGraf, int votosTendencia){
		String consulta = "SELECT nombre FROM tendencia WHERE id_tendencia="+idTendGraf+";";
		 conexion = new Conexion("rebeca", "ramirez.arroyo");
		 if(conexion!=null){
			  SQLContainer resultado2 = conexion.consulta(consulta);
			  if(resultado2 != null){
				  Item item2 = resultado2.getItem(resultado2.firstItemId());
				  String nombTendGraf = item2.getItemProperty("nombre").toString();
				  series.add(new DataSeriesItem(nombTendGraf, votosTendencia));
			  }
		 }
	}
	
	private void agregarAGraficoTend2(int idTendGraf, int votosTendencia){
		String consulta = "SELECT nombre FROM tendencia WHERE id_tendencia="+idTendGraf+";";
		 conexion = new Conexion("rebeca", "ramirez.arroyo");
		 if(conexion!=null){
			  SQLContainer resultado2 = conexion.consulta(consulta);
			  if(resultado2 != null){
				  Item item2 = resultado2.getItem(resultado2.firstItemId());
				  String nombTendGraf = item2.getItemProperty("nombre").toString();
				  series.add(new DataSeriesItem(nombTendGraf, votosTendencia));
			  }
		 }
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		return mainLayout;
	}

}
